#!/bin/bash

export BASE_DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
export SCRIPT_DIR="$BASE_DIR/scripts"

. $BASE_DIR/keyboard_layout.sh
. $BASE_DIR/transformations.sh
. $BASE_DIR/common.sh

PROPERTIES_FILE=termux.properties

install_pkg jq jq "required"

validate_config() {
    for row in $rows
    do
        if [ -z "${keyboard_rows[$row]}" ]
        then
            echoerr "The row \"$row\" not found"
            echoerr "The keyboard row needs to be registered as keyboard_rows['$row']='...' in keyboard_layout.sh"
            exit 1
        fi
        for item in ${keyboard_rows[$row]}
        do
            key="${keyboard[$item]}"
            if [ ! -z "$key" ]
            then
                if ! echo "$(tr_unescape "$key")" | jq -re '""' > /dev/null
                then
                    echo "$(tr_unescape \"$key\")"
                    echoerr "Cannot create Key $item (Invalid JSON)"
                    echoerr "$key"
                    exit 1
                fi
            fi
        done
    done
}

tr_unescape() {
    echo "$1" | sed 's/\\/\\\\/g' 
}

append_array() {
    printf "$1" | jq ".[. | length] |= $2"
}

generate_extra_keys() {
    tmux_prefix="$1"
    generated_rows="[]"
    for row in $rows
    do
        keys="[]"
        for item in ${keyboard_rows[$row]}
        do
            key="${keyboard[$item]}"
            if [ -z "$key" ]
            then
                key="$item"
            fi
            for tr in $transforms
            do
                key=$($tr "$key" "$tmux_prefix")
            done
            if echo "$key" | jq -re '""' &> /dev/null
            then
                updated=$(append_array "$keys" "$key")
            else
                updated=$(append_array "$keys" "\"$key\"")
            fi
            if [ ! -z "$updated" ]
            then
                updated=$(tr_unescape "$updated")
                keys=$updated
            fi
        done
        generated=$(append_array "$generated_rows" "$keys")
        generated_rows=$(tr_unescape "$generated")
    done
    printf "extra-keys = $(printf "$generated_rows" | jq -c .)"
}

gather_other_properties() {
    if [ ! -e $PROPERTIES_FILE ]
    then 
        return 
    fi
    
    reading_multiline_property=0
    property_started_prev_line=0
    while IFS= read -r line
    do
        if [ $reading_multiline_property -eq 1 ]
        then
            if echo "$line" | grep '\\ *$' > /dev/null
            then
                property_started_prev_line=0
                continue
            elif [ $property_started_prev_line -eq 1 ]
            then
                property_started_prev_line=0
                reading_multiline_property=0
            else
                reading_multiline_property=0
                continue
            fi
        fi
        if echo "$line" | grep "extra-keys" > /dev/null
        then
            reading_multiline_property=1
            property_started_prev_line=1
            continue
        fi
        echo $line
    done < $PROPERTIES_FILE
}

generate() {
    [ ! -e "$PROPERTIES_FILE" ] && touch "$PROPERTIES_FILE"
    cp "$PROPERTIES_FILE" "$PROPERTIES_FILE.bak" && \
    echosuccess "Backed up $PROPERTIES_FILE to $PROPERTIES_FILE.bak" && \
    echosuccess "Validating keyboard layout" && \
    validate_config && \
    echosuccess "Generating extra keys" && \
    gather_other_properties > "$PROPERTIES_FILE.tmp" && \
    generate_extra_keys "$1" >> "$PROPERTIES_FILE.tmp" && \
    echosuccess "Successfully generated extra keys" && \
    echosuccess "Reloading settings" && \
    termux-reload-settings

    exit_code=$?

    if [ $exit_code -ne 0 ]
    then
        install_pkg tmux tmux
        install_pkg neovim nvim
        exit 1
    fi
    read
}

show_rows() {
    echo "Layout : "
    for row in $rows
    do
        echodebug " $row=${keyboard_rows[$row]} " | column
        echodebug '-----------------------'
    done
}

setup() {
    show_rows
    read -p "Enter default key for TMUX (CTRL b)? " tmux_key
    tmux_key="${tmux_key:-CTRL b}"
    generate "$tmux_key"
}

setup

